1. small func
2. fmt.Printf
3. for any slice, array, the min is a[0]??


Int
	check for sign
	check size math.MaxInt32??

Sort	
	sort.Ints(a []int)
	sort.Strings(a []string)

strings
	longestxxxx
	if can't find an answer, try to walk through all chars
	for i:0; i<len(); i++ {
		do => str[i:]
	}

	palindrome
		move i to next
		0, b--, i, e++ , len(s)

		005 longest palindrome
		// b is the begin of Palindrome
		// e is the end of Palindrome
		// i is the middle
		// for every loop
		// i-b = e-i and we compare s[b], s[e]

	rotation
	reverse(all)
	reverse(i:j)
	reverse(j:k)

	min
		[]string, don't use 0 or a max value
		default is len(s[0])

array
	pass by reference
	array content changed if not using append to assign new address

	OK => nums = append(nums[:i], nums[i+1:]
	Not OK => nums = append([]int{}, nums...)


	remove => swap to the next or the last

	can i move both head & tail together?

	033 search in rotated srted array
	035 search insert position
	053 Maximum Subarray
	153 Find Minimum in Rotated Sorted Array

	Binary search
	func findMin(nums []int) int {
		start, end := 0, len(nums)-1
		mid := start + (end-start)/2
		if nums[start] < nums[mid] && nums[mid] < nums[end] { // not rotated
			return nums[start]
		}

		for start <= end {
			if start == end {
				return nums[start]
			} else if start+1 == end {
				return min(nums[start], nums[end])
			}

			mid = start + (end-start)/2
			if nums[mid] < nums[end] { // right side is rotated
				end = mid
			}
			if nums[start] < nums[mid] { // left side is rotated
				start = mid
			}
		}
		return 0 // never reaches here
	}

	O(n)
	func findMin(nums []int) int {
		l, r := 0, len(nums) - 1
		for  l < r {
			mid := l + (r - l) / 2;
			if nums[mid] > nums[r] { 
				l = mid + 1
			} else {
				r = mid
			}
		}
		return nums[l]
	}

linklist
	partition list
		=> new heads.
		=> depends on condition, add element to the right head
		=> link heads
	sort list
		=> merge sort
			sortList {
				secH := split()
				merger(sortList(head), sortList(secH))

	convert sorted list to bst
		=> convert to array
		=> convert array to bst
			bst() {
			check for nil
			mid = len(nums)/2
			return &TreeNode {
			Val: nums[mid],
			Left: bst(nums[:mid]),
			RIght: bst(nums[mid+1:]),
			}

	reverse linkedlist
		p
		for head != nil {
			tmp := head.Next
			head.Next = p
			p = head
			head = tmp
			}

	061 rotate list

	141 linkedlist cycle

	160 Intersection of two linkedlists
		func getIntersectionNode(headA, headB *ListNode) *ListNode {
			len_a, len_b := getLength(headA, headB)

			if len_a > len_b {
				headA = headA.Next
				lea_a--
			} else if len_a < len_b {
				headB = headB.Next
				len_b--
			}

			// len_a == len_b
			for headA != nil && headB != nil {
				if headA == headB {
				return headA
				}
				headA, headB = headA.Next, headB.Next
			}
			return nil
		}

fabonacci
	f(n) = f(n-1) + f(n-2)
	a := 1
	b := 1
	for i := 1; i < n; i++ {
		a, b = b, a+b
	}

	return b

BST 
	278 first bad version
	lowest common ancestor bst
	101 Symmetric Tree
	103 Binary Tree ZigZag order
	104 Minimux depth of binary tree
	110 Balanced Binary Tree

	235 Lowest common ancestor of a binary search tree
		func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
			if root == nil {
				return nil
			}

			if p.Val == root.Val {
				return p
			}
			if q.Val == root.Val {
				return q
			}

			if p.Val > root.Val && q.Val > root.Val {
				return lowestCommonAncestor(root.Right, p, q)
			}
			if p.Val < root.Val && q.Val < root.Val {
				return lowestCommonAncestor(root.Left, p, q)
			}
			return root
		}
	236 Lowest common ancestor of a binary tree

check cycle
	if no pointer, create a func <= 202

graph
	200 number of islands/
	695 max area of island/

set
	subsets 
	[1, 2] => {}, {1,2}, {1}, {2}; 2^n = 4
			{}
		{}	{2}
	{}
		{1}	{1}
			{1,2}

	func all_subsets(nums []int) [][]int {
		subset := [][]int{}
		recur(nums, []int{}, &subset)
		return subset
	}

	func recur(nums, tmp []int, ret *[][]int) {
		l := len(nums)
		if l == 0 {
			sort.Ints(tmp)
			// or print sets
			*ret = append(*ret, tmp)
			return
		}

		recur(nums[:l-1], tmp, ret)

		recur(nums[:l-1], append([]int{nums[l-1]}, tmp...), ret)
	}

DP
	204 countprimes
