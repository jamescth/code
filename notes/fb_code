binary search
	left, right := 0, len(nums)-1
	for left < right {
		mid := (left + right) /2

		if nums[mid] == n 
			return 
		if nums[mid] > n
			right = mid-1
		else 
			left = mid+1
	}

	hints: divide & conqur

find Maximum in sliding Window
	when finding max or min, instead of using max() / min()
	use heap if the number is greater than 2

	hints: heap
	is it required to store all the elements of current window?

	using queue

find k in rotated sorted array
	033
	for left < right {
		mid := (left + right) / 2

		if nums[mid] == k {
			return mid
		}

		if nums[left] <= nums[mid] {
			// this can be done as binary search
			if k >= nums[left] && k < nums[mid] {
				right = mid - 1
			} else {
				left = mid + 1
			}
		} else {
			if k > nums[mid] && k <= nums[right] {
				left = mid + 1
			} else {
				right = mid - 1
			}
		}
	}
	if nums[left] == k {
		return left
	}
	return -1

find min value in rotate sorted array
	153
	for left < right {
		mid := (left + right) / 2
		if nums[mid] > nums[right] {
			left = mid + 1
		} else {
			right = mid
		}
	}

find the 1st bad version
	L, R := 0, len(vers)-1
	for L <= R {
		M := (L + R) / 2

		// fmt.Printf("%v L %d M %d R %d\n", vers, L, M, R)
		if vers[M] == true {
			R = M - 1
		} else {
			L = M + 1
		}
	}

Write a function to sort a list of integers that looks
like this [5,2,0,3,0,1,6,0] -&gt; [1,2,3,5,6,0,0,0]
in the most efficient way.

use heap, get the largest num
if v > 0
	ret = append([]int{v}, ret...}
if v == 0
	ret = append(ret, 0)

Pig Latin/Goat Latin

Given a list of words, create a master list that has sublists that contain anagrams.
	what defines an anagram: two words are anagrams of each other if they consist
	of the same set of letters and each letter appears exactly the same number or
	time in both words. 

Simple comparison between numbers given constraints see how many comparisons are true. 

Binary tree traversal

Given a list of integers, output all subsets of size three, which sum to zero.  


***********************************************************************************
missing number
	sum - (n * (n+1) /2)

house-robber
	func rob(nums []int) int {
		// a 对于偶数位上的最大值的记录
		// b 对于奇数位上的最大值的记录
		var a, b int
		for i, v := range nums {
			if i%2 == 0 {
				a = max(a+v, b)
			} else {
				b = max(a, b+v)
			}
		}

		return max(a, b)
	}
